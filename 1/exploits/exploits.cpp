#include "exploits.h"
#include <iostream>
#include <thread>
int gucio = 0;
bool isNoclipWorking = false;
static float noclipspeed = 1.00001f;
static bool speed = false;
i_exploits& i_exploits::exp()
{
	static i_exploits ins;
	return ins;
}
struct color_t
{
	BYTE r, g, b, a;

	color_t(float r_, float g_, float b_, float a_) {
		r = r_;
		g = g_;
		b = b_;
		a = a_;
	}

};

void i_exploits::exploits_init()
{
	uintptr_t WeaponManager = i_memory::reeq().Read<uintptr_t>(i_dupa::chu().i_localplayer + 0x10D8);
	uintptr_t weaponinfo = i_memory::reeq().Read<uintptr_t>(WeaponManager + 0x20);
	if (godmode)
	{
		i_memory::reeq().Write<bool>(i_dupa::chu().i_localplayer + 0x189, true);
	}
	if (noclip)
	{
		D3DXVECTOR3 pos = i_memory::reeq().Read<D3DXVECTOR3>(i_dupa::chu().i_localplayer + 0x90);
		uintptr_t navig = i_memory::reeq().Read<uintptr_t>(i_dupa::chu().i_localplayer + 0x30);
		i_memory::reeq().Write<D3DXVECTOR3>(navig + 0x30, D3DXVECTOR3(0, 0, 0));

		if (GetAsyncKeyState(0x57) & 0x8000) {
			i_memory::reeq().Write<D3DXVECTOR3>(i_dupa::chu().i_localplayer + 0x320, D3DXVECTOR3(0, 0, 0));
			uint64_t camera = i_memory::reeq().Read<uintptr_t>(i_dupa::chu().i_camera + 0x0);
			D3DXVECTOR3 angles = i_memory::reeq().Read<D3DXVECTOR3>(camera + 0x03D0);
			if (angles == D3DXVECTOR3(0, 0, 0))
				angles = i_memory::reeq().Read<D3DXVECTOR3>(camera + 0x40);
			D3DXVECTOR3 npos = pos;
			npos.x += (angles.x * 2);
			npos.y += (angles.y * 2);
			npos.z += (angles.z * 2);
			i_memory::reeq().Write<D3DXVECTOR3>(i_dupa::chu().i_localplayer + 0x90, npos);
			i_memory::reeq().Write<D3DXVECTOR3>(navig + 0x50, npos); // Stupid French's


		}

	}


	if (norecoil)
	{
		i_memory::reeq().Write<float>(weaponinfo + 0x2F4, 0.f);
	}

	if (nospread)
	{
		i_memory::reeq().Write<float>(weaponinfo + 0x84, 0.f);
	}


}




void i_exploits::start()
{
	//dzia³a gówno
	if (i_dupa::chu().i_localplayer)
	{
		i_exploits::exploits_init();

	}
}
